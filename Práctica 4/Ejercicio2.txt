a) 
<?php
$i = 1;
while ($i <= 10) {
 print $i++;
}
?>
La variable i comienza en 1, muestra el valor de i y luego incrementa uno en uno, esto lo hace mientras que i sea menor o igual a 10

<?php
$i = 1;
while ($i <= 10):
 print $i;
 $i++;
endwhile;
?>
La variable i comienza en 1, muestra el valor de i y luego incrementa uno en uno, esto lo hace mientras que i sea menor o igual a 10, endwhile termina el bucle


<?php
$i = 0;
do {
 print ++$i;
} while ($i<10);
?>
La variable i comienza en 0, aumenta el valor de i en uno y luego lo muestra, esto lo hace mientras i sea menor o igual a 10

Por lo tanto, los 3 códigos son equivalentes


b)
<?php
for ($i = 1; $i <= 10; $i++) {
 print $i;
}
?>
Comienza con a variable $i igual a 1, mientras $i sea menor o igual a 10, el ciclo imprime el valor de $i y luego incrementa $i en uno en cada repetición. Si la condición (i <=10) no se cumple, se rompe el for y termina.

<?php
for ($i = 1; $i <= 10; print $i, $i++) ;
?>
Comienza con la variable i igual a 1, mientras i sea menor o igual a 10, imprime i y luego incrementa i en uno.

<?php
for ($i = 1; ;$i++) {
 if ($i > 10) {
 break;
 }
 print $i;
}
?>
Comienza con la variable i en uno, y la incrementa en uno, si al incrementarla i es mayor que 10, se rompe y termina, sino, imprime i.

<?php
$i = 1;
for (;;) {
 if ($i > 10) {
 break;
 }
 print $i;
 $i++;
}
?>
Comienza con la variable i en uno, el for no tiene condiciones por lo que ingresa directamente, si i es mayor que 10 se rompe, sino imprime i y luego incrementa i en uno


c)
<?php
…
…
if ($i == 0) {
 print "i equals 0";
} elseif ($i == 1) {
 print "i equals 1";
} elseif ($i == 2) {
 print "i equals 2";
}
?>


<?php
…
…
switch ($i) {
 case 0:
 print "i equals 0";
 break;
 case 1:
 print "i equals 1";
 break;
 case 2:
 print "i equals 2";
 break;
}
?>

Son equivalentes usando distintas estructuras